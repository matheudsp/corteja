// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id        String     @id @default(uuid())
  nome      String
  telefone  String     @unique
  email     String     @unique
  senha     String
  cpf       String?
  status    Status     @default(Ativo)
  enderecos Endereco[] //1-N
  criadoEm  DateTime   @default(now())

  agendamentos Agendamento[] // 1-N
}

model Endereco {
  id        Int     @id @default(autoincrement())
  cidade    String?
  clienteId String

  clientes Cliente @relation(fields: [clienteId], references: [id])
}

model Arquivos {
  id String @id @default(uuid())
  tipo Tipo 
  criadoEm DateTime @default(now())
  url String
}

model Salao {
  id             String   @id @default(uuid())
  nome           String
  foto           String
  capa           String
  email          String   @unique
  telefone       String   @unique
  enderecoCidade String
  enderecoUf     String
  enderecoCep    String
  enderecoNumero String
  enderecoPais   String
  geoCoordenadas String[]
  criadoEm       DateTime @default(now())

  colaboradores Colaborador[]
  cupons        Cupom[]
  servicos      Servico[] // 1-N
  agendamentos  Agendamento[] // 1-N
  horarios      Horario[] // 1-N
}

model Colaborador {
  id             String   @id @default(uuid())
  nome           String
  telefone       String?  @unique
  email          String   @unique
  senha          String
  descricao      String?
  dataNascimento String
  cpf            String?
  criadoEm       DateTime @default(now())

  servicos     Servico[]
  agendamentos Agendamento[] // 1-N
  horarios     Horario[]
  Salao        Salao?        @relation(fields: [salaoId], references: [id])
  salaoId      String?
}

model Servico {
  id String @id @default(uuid())

  titulo      String
  preco       Float
  duracao     Int
  recorrencia Int?
  descricao   String
  criadoEm    DateTime @default(now())

  agendamentos  Agendamento[]
  horarios      Horario[]
  colaboradorId String?
  colaborador   Colaborador?  @relation(fields: [colaboradorId], references: [id])
  salaoId       String
  salao         Salao         @relation(fields: [salaoId], references: [id])
}

model Cupom {
  id            String        @id @default(uuid())
  valor         Float
  dataInicio    DateTime
  dataFim       DateTime
  codigo        String
  quantidadeUso Int
  usosRestantes Int
  status        Status        @default(Ativo)
  salaoId       String?
  salao         Salao?         @relation(fields: [salaoId], references: [id])
  agendamentos  Agendamento[] // 1-N
}

model Agendamento {
  id            String      @id @default(uuid())
  data          DateTime
  valor         Float
  criadoEm      DateTime    @default(now())
  cupom         Cupom?      @relation(fields: [cupomId], references: [id])
  cupomId       String?
  salao         Salao       @relation(fields: [salaoId], references: [id])
  salaoId       String
  servico       Servico     @relation(fields: [servicoId], references: [id])
  servicoId     String
  colaborador   Colaborador @relation(fields: [colaboradorId], references: [id])
  colaboradorId String
  cliente       Cliente     @relation(fields: [clienteId], references: [id])
  clienteId     String
}

model Horario {
  id             String      @id @default(uuid())
  dias           Int // Dias da semana para agendamento, domingo - 0 ... sabado - 6
  horarioInicio  DateTime
  horarioTermino DateTime
  criadoEm       DateTime    @default(now())
  salao          Salao       @relation(fields: [salaoId], references: [id])
  salaoId        String
  servico        Servico     @relation(fields: [servicoId], references: [id])
  servicoId      String
  colaborador    Colaborador @relation(fields: [colaboradorId], references: [id])
  colaboradorId  String
}

enum Status {
  Ativo
  Inativo
}

enum Tipo {
  Servico
  Salao
}
